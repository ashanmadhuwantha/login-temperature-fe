{"ast":null,"code":"import axios from \"axios\";\nimport { authService } from \"./authService\";\nimport LocalStorageService from \"../services/storage/localStorageService\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconsole.log(process.env.REACT_APP_API_URL);\nconst localStorageService = LocalStorageService.getService(); //Add a response interceptor\n\nexport function responseInterceptor() {\n  axios.interceptors.response.use(response => {\n    return response;\n  }, function (error) {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401 && originalRequest.url === API_URL + \"auth/refresh-token\") {\n      localStorage.removeItem(\"access_token\");\n      localStorageService.clearToken();\n      return Promise.reject(error);\n    }\n\n    if (error.response.status === 400 && originalRequest.url === API_URL + \"auth/refresh-token\") {\n      localStorage.removeItem(\"access_token\");\n      localStorageService.clearToken();\n      return Promise.reject(error);\n    }\n\n    if (error.response.status === 500 && originalRequest.url === API_URL + \"auth/refresh-token\") {\n      localStorage.removeItem(\"access_token\");\n      localStorageService.clearToken();\n      return Promise.reject(error);\n    }\n\n    if (error.response.status === 401 && originalRequest.url === API_URL + \"auth/login\") {\n      localStorage.removeItem(\"access_token\");\n      return Promise.reject(error);\n    }\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      const refresh_token = localStorageService.getRefreshToken();\n      return axios.post(API_URL + \"auth/refresh-token\", {\n        refresh_token: refresh_token\n      }).then(res => {\n        if (res.status === 200) {\n          localStorageService.setToken(res.data);\n          axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + localStorageService.getAccessToken();\n          return axios(originalRequest);\n        }\n      });\n    }\n\n    return Promise.reject(error);\n  });\n}","map":{"version":3,"sources":["/Users/ashanmadhuwantha/Documents/Github/login-temperature-fe/src/services/responseInterceptor.js"],"names":["axios","authService","LocalStorageService","API_URL","process","env","REACT_APP_API_URL","console","log","localStorageService","getService","responseInterceptor","interceptors","response","use","error","originalRequest","config","status","url","localStorage","removeItem","clearToken","Promise","reject","_retry","refresh_token","getRefreshToken","post","then","res","setToken","data","defaults","headers","common","getAccessToken"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAOC,mBAAP,MAAgC,yCAAhC;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AACAC,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAACC,GAAR,CAAYC,iBAAxB;AAEA,MAAMG,mBAAmB,GAAGP,mBAAmB,CAACQ,UAApB,EAA5B,C,CAEA;;AAEA,OAAO,SAASC,mBAAT,GAA+B;AACpCX,EAAAA,KAAK,CAACY,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACGD,QAAD,IAAc;AACZ,WAAOA,QAAP;AACD,GAHH,EAKE,UAAUE,KAAV,EAAiB;AACf,UAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;;AAEA,QACEF,KAAK,CAACF,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IACAF,eAAe,CAACG,GAAhB,KAAwBhB,OAAO,uBAFjC,EAGE;AACAiB,MAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACAZ,MAAAA,mBAAmB,CAACa,UAApB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;AACD;;AACD,QACEA,KAAK,CAACF,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IACAF,eAAe,CAACG,GAAhB,KAAwBhB,OAAO,uBAFjC,EAGE;AACAiB,MAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACAZ,MAAAA,mBAAmB,CAACa,UAApB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;AACD;;AACD,QACEA,KAAK,CAACF,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IACAF,eAAe,CAACG,GAAhB,KAAwBhB,OAAO,uBAFjC,EAGE;AACAiB,MAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACAZ,MAAAA,mBAAmB,CAACa,UAApB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;AACD;;AACD,QACEA,KAAK,CAACF,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IACAF,eAAe,CAACG,GAAhB,KAAwBhB,OAAO,eAFjC,EAGE;AACAiB,MAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACA,aAAOE,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;AACD;;AAED,QAAIA,KAAK,CAACF,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IAAiC,CAACF,eAAe,CAACS,MAAtD,EAA8D;AAC5DT,MAAAA,eAAe,CAACS,MAAhB,GAAyB,IAAzB;AAEA,YAAMC,aAAa,GAAGjB,mBAAmB,CAACkB,eAApB,EAAtB;AAEA,aAAO3B,KAAK,CACT4B,IADI,CACCzB,OAAO,uBADR,EACiC;AACpCuB,QAAAA,aAAa,EAAEA;AADqB,OADjC,EAIJG,IAJI,CAIEC,GAAD,IAAS;AACb,YAAIA,GAAG,CAACZ,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,UAAAA,mBAAmB,CAACsB,QAApB,CAA6BD,GAAG,CAACE,IAAjC;AACAhC,UAAAA,KAAK,CAACiC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IACE,YAAY1B,mBAAmB,CAAC2B,cAApB,EADd;AAEA,iBAAOpC,KAAK,CAACgB,eAAD,CAAZ;AACD;AACF,OAXI,CAAP;AAYD;;AACD,WAAOO,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;AACD,GA3DH;AA6DD","sourcesContent":["\r\nimport axios from \"axios\";\r\n\r\nimport { authService } from \"./authService\";\r\n\r\nimport LocalStorageService from \"../services/storage/localStorageService\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\nconsole.log(process.env.REACT_APP_API_URL)\r\n\r\nconst localStorageService = LocalStorageService.getService();\r\n\r\n//Add a response interceptor\r\n\r\nexport function responseInterceptor() {\r\n  axios.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n\r\n    function (error) {\r\n      const originalRequest = error.config;\r\n\r\n      if (\r\n        error.response.status === 401 &&\r\n        originalRequest.url === API_URL + `auth/refresh-token`\r\n      ) {\r\n        localStorage.removeItem(\"access_token\");\r\n        localStorageService.clearToken();\r\n        return Promise.reject(error);\r\n      }\r\n      if (\r\n        error.response.status === 400 &&\r\n        originalRequest.url === API_URL + `auth/refresh-token`\r\n      ) {\r\n        localStorage.removeItem(\"access_token\");\r\n        localStorageService.clearToken();\r\n        return Promise.reject(error);\r\n      }\r\n      if (\r\n        error.response.status === 500 &&\r\n        originalRequest.url === API_URL + `auth/refresh-token`\r\n      ) {\r\n        localStorage.removeItem(\"access_token\");\r\n        localStorageService.clearToken();\r\n        return Promise.reject(error);\r\n      }\r\n      if (\r\n        error.response.status === 401 &&\r\n        originalRequest.url === API_URL + `auth/login`\r\n      ) {\r\n        localStorage.removeItem(\"access_token\");\r\n        return Promise.reject(error);\r\n      }\r\n\r\n      if (error.response.status === 401 && !originalRequest._retry) {\r\n        originalRequest._retry = true;\r\n\r\n        const refresh_token = localStorageService.getRefreshToken();\r\n\r\n        return axios\r\n          .post(API_URL + `auth/refresh-token`, {\r\n            refresh_token: refresh_token,\r\n          })\r\n          .then((res) => {\r\n            if (res.status === 200) {\r\n              localStorageService.setToken(res.data);\r\n              axios.defaults.headers.common[\"Authorization\"] =\r\n                \"Bearer \" + localStorageService.getAccessToken();\r\n              return axios(originalRequest);\r\n            }\r\n          });\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}